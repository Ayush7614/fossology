#!/usr/bin/env bash
# FOSSology postinstall script
# Copyright (C) 2008-2013 Hewlett-Packard Development Company, L.P.
# Copyright (C) 2015 Siemens AG
# Copyright Orange, nicolas1.toussaint@orange.com
#
# This script is for things that need to be done on the runtime system
# after we've installed the bits on the filesystem. It needs to be
# idempotent, meaning that running it repeatedly will still do the
# right thing, regardless of the success of previous runs.

show_help() \{
  cat <<EOF
Usage: fo-postinstall [options]
  -a or --agent           : agent specific actions
  -d or --database        : create the FOSSology database
  -w or --web-only        : web interface specific actions
  -s or --scheduler-only  : scheduler specific actions
  -e or --everything      : all actions, default
  -o or --overwrite       : overwrite config files with new versions
  -l or --licenseref      : update the license_ref table with fossology supplied licenses
  -c or --common          : common actions
  -h or --help            : this help text
 Special options
  --no-running-database   : omit all database operations
  --container-mode        : do not expect to be running as root
                            + skip creation of users and groups
  --force-decision        : Force update of SHA256 hash in decision tables
  --force-pfile           : Force calculation of SHA256 hash of pfile entries
  --force-encode          : Force recoding copyright and sister tables
EOF
\}

AGENT=''
DATABASE=''
WEBONLY=''
SCHEDULERONLY=''
EVERYTHING=true
OVERWRITE=''
LICENSEREF=''
COMMON=''
RUNNINGDATABASE=true
CONTAINER_MODE=''
FORCEDECISION=''
FORCEPFILE=''
FORCEENCODE=''

## Options parsing and setup
# parse options
OPTS=$(getopt -o adwseolch --long agent,database,web-only,scheduler-only,everything,overwrite,licenseref,common,no-running-database,container-mode,force-decision,force-pfile,force-encode,help -n 'fo-postinstall' -- "$@")

if [[ $? -ne 0 ]]; then
   OPTS="--help"
fi

eval set -- "$OPTS"

# If any flags are sent, set them and make everything false
while true; do
   case "$1" in
      -a|--agent)            AGENT=true; EVERYTHING=''; shift;;
      -d|--database)         DATABASE=true; EVERYTHING=''; shift;;
      -w|--web-only)         WEBONLY=true; EVERYTHING=''; shift;;
      -s|--scheduler-only)   SCHEDULERONLY=true; EVERYTHING=''; shift;;
      -e|--everything)       EVERYTHING=true; shift;;
      -o|--overwrite)        OVERWRITE=true; shift;;
      -l|--licenseref)       LICENSEREF=true; EVERYTHING=''; shift;;
      -c|--common)           COMMON=true; EVERYTHING=''; shift;;
      --no-running-database) RUNNINGDATABASE=''; EVERYTHING=''; shift;;
      --container-mode)      CONTAINER_MODE=true; shift;;
      --force-decision)      FORCEDECISION='--force-decision'; shift;;
      --force-pfile)         FORCEPFILE='--force-pfile'; shift;;
      --force-encode)        FORCEENCODE='--force-encode'; shift;;
      -h|--help)             show_help; exit;;
      --)                    shift; break;;
      *)                     echo "Error: option $1 not recognised"; exit 1;;
   esac
done

# If everything flags were sent, set everything to true to prevent overwrite
if [[ $OPT == *" -e "* || $OPT == *" --everything "* ]]; then
    EVERYTHING=true
fi

set -o errexit -o nounset -o pipefail

if [[ $EVERYTHING ]]; then
   echo "*** Running postinstall for everything ***"
   COMMON=true
   SCHEDULERONLY=true
   AGENT=true
   DATABASE=true
   WEBONLY=true
   LICENSEREF=true
fi

# Checks if we are and should be running as root
# Returns 0 if running as root
# Returns 1 if not running as root, and not expected to
# Exits with failure is not running as root, and expected to be.

check_run_as_root() \{
  if [[ $(id -u) -eq 0 ]]
  then # we are root
    return 0
  else
    if [[ $CONTAINER_MODE ]]
    then # not root, and should not be
      return 1
    else # not root, but expected to be
      echo >&2 "ERROR: fo-postinstall must run as root."
      echo >&2 "Aborting."
      exit 1
    fi
  fi
\}

read_config_value() \{
   local line="$1"
   local key="$2"
   local out="$3"
   [[ "$out" =~ ^[a-zA-Z]+$ ]] || \{ echo >&2 "FATAL: bad parameters to read_config_value: $@"; exit 1; \}
   if [[ $line =~ ^[[:space:]]*${key}[[:space:]]*\=[[:space:]]*([^[:space:]\']*) ]]; then
      eval "$out='$\{BASH_REMATCH[1]\}'"
   fi
\}

set_value_in_section() \{
   echo "NOTE: writing $2=$3 in section $4 of $1"
   sed -e "s/\[$4\]/[$4]\n$2=$3/" -i.bak "$1"
\}

REPO=''
PROJECTGROUP=''
CONFIG="{$SYSCONFDIR}/fossology.conf"
if [[ -f $CONFIG ]]; then
   while read line; do
      read_config_value "$line" path REPO
      read_config_value "$line" PROJECTGROUP PROJECTGROUP
   done < "$CONFIG"
   [[ $PROJECTGROUP =~ ^[a-z0-9]*$ ]] || \{ echo >&2 "ERROR: bad value for PROJECTGROUP in config"; exit 2; \}
else
   echo >&2 "ERROR: Cannot find $CONFIG"
   exit 1
fi

###############################################
echo "=============================***======================================="
echo "User id: $(id)"
echo "USER: {$USER}"
echo "CONTAINER_MODE: $CONTAINER_MODE"
echo "=============================***======================================="
###############################################

if [[ $COMMON ]]; then
   echo "*** Running postinstall for common actions***"

   # check path to repo
   [[ $REPO ]] || \{ echo >&2 "ERROR: path is not set in $CONFIG"; exit 1; \}

   # set default when PROJECTGROUP is not set
   [[ $PROJECTGROUP ]] || \{
      set_value_in_section "$CONFIG" PROJECTGROUP {$PROJECTGROUP} 'DIRECTORIES'
      PROJECTGROUP="{$PROJECTGROUP}"
   \}

   if [[ ! $CONTAINER_MODE ]]
   then
      check_run_as_root
      ## create user and group
      # Because we are doing these by name, in the multi-machine install case
      # we may end up with uid/gid being different across machines. This will
      # either need to be fixed by hand or with NFSv4 you can use rpc.idmapd
      # to do uid/gid mapping. More details will be provided in the multi-machine
      # documentation.

      # Make sure the user and group exist, if not then create
      echo "*** Creating user and group ***"

      # check for group
      if grep -q "^$PROJECTGROUP:" /etc/group; then
         echo "NOTE: group '$PROJECTGROUP' already exists, good."
      elif groupadd --system "$PROJECTGROUP"; then
         echo "NOTE: group '$PROJECTGROUP' created"
      else
         echo >&2 "ERROR: Unable to create group '$PROJECTGROUP'"
         exit 1
      fi

      # check for user
      if grep -q "^{$PROJECTUSER}:" /etc/passwd; then
         echo "NOTE: user '{$PROJECTUSER}' already exists, good."
         USERSHELL=$(grep "^{$PROJECTUSER}:" /etc/passwd | cut -d: -f 7)
         if [[ $USERSHELL == "/bin/false" ]]; then
            echo >&2 "ERROR: {$PROJECTUSER} shell must be a real shell"
            exit 1
         fi
         USERHOME=$(grep "^{$PROJECTUSER}:" /etc/passwd | cut -d: -f 6)
         if [[ $USERHOME != "/home/{$PROJECTUSER}" ]]; then
            echo "NOTE: change user '{$PROJECTUSER}' homedir from $USERHOME to /home/{$PROJECTUSER}."
            mkdir --parents /home/{$PROJECTUSER}
            chown {$PROJECTUSER}:$PROJECTGROUP /home/{$PROJECTUSER}
            usermod --home /home/{$PROJECTUSER} {$PROJECTUSER}
         fi
      elif useradd --comment "{$PROJECT}" --gid $PROJECTGROUP --create-home --shell /bin/bash --system {$PROJECTUSER}; then
         echo "NOTE: user '{$PROJECTUSER}' created"
      else
         echo >&2 "ERROR: Unable to create user '{$PROJECTUSER}'"
         exit 1
      fi
   fi # end of ! CONTAINER_MODE

   ## check for existance/ownership/permissions of needed directories
   echo "*** Making sure needed dirs exist with right ownership/permissions ***"

   if [[ -d "{$CACHEDIR}" ]]; then
       echo "*** clearing file cache ***"
       rm --force --recursive {$CACHEDIR}/*
   fi
   if [[ -d "$REPO" ]]; then
       echo "NOTE: Repository already exists at $REPO"
   fi

   mkdir --parents \
      "{$PROJECTSTATEDIR}" \
      "{$PROJECTSTATEDIR}/agents" \
      "{$CACHEDIR}" \
      "$REPO" \
      "{$REPODIR}/fossdash"
      
   if [[ ! $CONTAINER_MODE ]]
   then
      check_run_as_root
      chown root:$PROJECTGROUP "{$PROJECTSTATEDIR}" "{$PROJECTSTATEDIR}/agents" {$CACHEDIR}
      chmod 2775 "{$PROJECTSTATEDIR}" "{$PROJECTSTATEDIR}/agents" {$CACHEDIR} "{$REPODIR}/fossdash"
   
      # make sure repo and its parent dir has the right permissions
      if [[ $(stat -c "%G" $REPO) != {$PROJECTGROUP} ]]; then
      echo "NOTE: Repository group is not correct."
      echo "Fixing..This may take long duration, depending on your repository size."
      chown --recursive {$PROJECTUSER}:$PROJECTGROUP $\{REPO%/*\} $REPO
      fi
      chmod 2770 $\{REPO%/*\} $REPO

      # make install sets Db.conf's mode to 660, but can't chgrp it because
      # the group doesn't exist until we create it above. So chgrp now
      chgrp $PROJECTGROUP {$SYSCONFDIR}/Db.conf || echo >&2 "ERROR: failed to chgrp {$SYSCONFDIR}/Db.conf"
   fi # end of ! CONTAINER_MODE

   if [[ $CONTAINER_MODE ]]
   then # In Container + Root == Building container.
      if check_run_as_root; then
         # FIXME -> set minimum permissions
         chmod a+rwX --recursive --verbose "{$PROJECTSTATEDIR}" "{$PROJECTSTATEDIR}/agents" {$CACHEDIR} "{$REPODIR}/fossdash" {$SYSCONFDIR}/Db.conf
      fi
   fi # end of CONTAINER_MODE


   cat <<EOF
NOTE: Running the PostgreSQL vacuum and analyze command can result in a large database performance improvement.
      We suggest that you either configure postgres to run its autovacuum and autoanalyze daemons, or maintagent -D in a cron job, or run Admin > Maintenance on a regular basis.
      Admin > Dashboard will show you the last time vacuum and analyze have been run.
EOF
fi # end of COMMON

if [[ ! $CONTAINER_MODE ]]
then
   [[ $PROJECTGROUP ]] || \{ echo "PROJECTGROUP is not set"; exit 2; \}
fi # end of ! CONTAINER_MODE

########################################################################

if [[ $DATABASE && $RUNNINGDATABASE ]]; then
   echo "*** Create Database ***"
   {$LIBEXECDIR}/dbcreate
fi # end of DATABASE

if [[ $WEBONLY ]]; then
   LICENSEREF=true
fi

if [[ $LICENSEREF && $RUNNINGDATABASE ]]; then
    echo "*** update the database and license_ref table ***"
    {$LIBEXECDIR}/fossinit.php -l -c {$SYSCONFDIR} $FORCEDECISION $FORCEPFILE $FORCEENCODE
fi # end of license reference

########################################################################

if [[ $AGENT ]]; then
   echo "*** Running postinstall Agents ***"
   if [[ ! $CONTAINER_MODE ]]
   then
      check_run_as_root
      # change all files ownership to {$PROJECTUSER}:$PROJECTGROUP
      chown --recursive {$PROJECTUSER}:$PROJECTGROUP {$MODDIR} {$LIBEXECDIR} {$SYSCONFDIR}
      chown --silent {$PROJECTUSER}:$PROJECTGROUP {$INCLUDEDIR}/libfossology.h
      chown --silent {$PROJECTUSER}:$PROJECTGROUP {$MAN1DIR}/cp2foss.1\{,.gz\} {$MAN1DIR}/fossjobs.1\{,.gz\} || echo
   elif check_run_as_root
   then # In Container + Root == Building container.
      # FIXME -> set minimum permissions
      chmod a+rwX --recursive {$MODDIR} {$LIBEXECDIR} {$SYSCONFDIR}  {$INCLUDEDIR}/libfossology.h
      [ -d {$MAN1DIR} ] && chmod a+r -R {$MAN1DIR} || true
   fi

   if [[ $RUNNINGDATABASE ]]; then
      if ! {$LIBEXECDIR}/fo_dbcheck.php -c {$SYSCONFDIR}; then
      echo "FATAL: unable to connect to database, please check {$SYSCONFDIR}/Db.conf"
      exit 1
      fi
      echo "Database connectivity is good."
   fi
fi # end of AGENT

########################################################################

if [[ $SCHEDULERONLY ]]; then
   echo "*** Setting up Scheduler ***"
   if check_run_as_root; then

      # Create the scheduler log directory.
      if [[ -f {$LOGDIR} ]] ; then
      # Must be a directory and not a file
      rm --force {$LOGDIR}
      fi
      mkdir --parents {$LOGDIR}
      if [[ ! $CONTAINER_MODE ]]
      then
         chown --recursive {$PROJECTUSER}:$PROJECTGROUP {$LOGDIR}
         chmod 2775 {$LOGDIR}
         find {$LOGDIR} -type f -print0 | xargs --no-run-if-empty --null chmod 660
      else
         # FIXME -> set minimum permissions
         chmod a+rwX --recursive {$LOGDIR}
      fi

      echo "Install S3 Backup tools"
      {$LIBEXECDIR}/fo-backup-S3.sh --install
   fi

fi # end of SCHEDULERONLY

########################################################################

if [[ $WEBONLY ]]; then
  RESTART_MESSAGE=false
  echo "*** Setting up the web interface ***"

  if [[ ! $CONTAINER_MODE ]]
  then
      check_run_as_root

      # See if web server user exists, if so add to the group.
      # check for www-data (Debian, etc)
      if grep -q "^www-data:" /etc/passwd; then
         echo "NOTE: Adding user www-data to group $PROJECTGROUP"
         # this is smart enough to not add multiple times so it's ok to repeat
         usermod --groups $PROJECTGROUP --append www-data
      fi

      # check for apache (RHEL/CentOS, etc)
      if grep -q "^apache:" /etc/passwd; then
         echo "NOTE: Adding user apache to group $PROJECTGROUP"
         # this is smart enough to not add multiple times so it's ok to repeat
         usermod --groups $PROJECTGROUP --append apache
      fi
  fi # end of ! CONTAINER_MODE

  # Enable mod_rewrite for REST API
  if [[ -f /etc/httpd/conf.modules.d/00-base.conf ]]; then
    # We are on RHEL
    if ! egrep -q "^LoadModule rewrite_module modules/mod_rewrite.so" /etc/httpd/conf.modules.d/00-base.conf; then
      echo "NOTE: Enabling apache module rewrite"
      echo "LoadModule rewrite_module modules/mod_rewrite.so" >> /etc/httpd/conf.modules.d/00-base.conf
      RESTART_MESSAGE=true
    elif [[ -f /opt/bitnami/apache/conf/httpd.conf ]]
    then # We are in Bitnami Apache container
       echo "NOTE: Enabling apache module rewrite for Bitnami"
       sed -i -r 's/#LoadModule rewrite_module/LoadModule rewrite_module/' /opt/bitnami/apache/conf/httpd.conf
    else
      # We are on Debian
      if ! a2query -q -m rewrite; then
         echo "NOTE: Enabling apache module rewrite"
         /usr/sbin/a2enmod rewrite
         RESTART_MESSAGE=true
      fi
    fi
  fi

  # Enable fossology for source install
  if [[ -f /opt/bitnami/apache/conf/httpd.conf ]]; then # Bitnami Apache container
    echo "NOTE: Copy fossology site to {$APACHE2_SITE_DIR}"
    ln -s {$DESTDIR}{$SYSCONFDIR}/conf/src-install-apache-example.conf {$APACHE2_SITE_DIR}/fossology.conf
  elif [[ "{$DESTDIR}" != *"debian"* ]]; then
    if [[ -d {$APACHE2_SITE_DIR} ]]; then
      if [[ -f {$APACHE2_SITE_DIR}/fossology.conf ]]; then
        echo "Fossology already enabled for apache2";
      else
        echo "NOTE: enabling fossology site for apache2";
        ln -s {$DESTDIR}{$SYSCONFDIR}/conf/src-install-apache-example.conf {$APACHE2_SITE_DIR}/fossology.conf;
        {$APACHE2_EN_SITE} fossology.conf;
        RESTART_MESSAGE=true
      fi;
    elif [[ -d {$HTTPD_SITE_DIR} ]]; then
      if [[ -f {$HTTPD_SITE_DIR}/fossology.conf ]]; then
        echo "Fossology already enabled for httpd";
      else
        echo "NOTE: enabling fossology site for httpd";
        ln -s {$DESTDIR}{$SYSCONFDIR}/conf/src-install-apache-example.conf {$HTTPD_SITE_DIR}/fossology.conf;
        RESTART_MESSAGE=true
      fi;
    fi;
  fi;

  # apache2 reload is only necessary when it is running.
  if [[ -x /etc/init.d/apache2 ]] # exclude Bitnami containers
  then
    if /etc/init.d/apache2 status > /dev/null; then
      /etc/init.d/apache2 reload
      if [[ "$RESTART_MESSAGE" = true ]]; then
         echo "NOTE: Restart apache to apply the changes"
      fi
    fi
  fi
fi # end of WEBONLY

########################################################################
if [[ $CONTAINER_MODE ]]
then
   if check_run_as_root
   then
      # FIXME -> set minimum permissions
      echo "Force permissive permissions in containers."
      for f in \
         /usr/local/etc/fossology/Db.conf \
         /usr/local/etc/fossology/fossology.conf \
         /etc/apache2/conf-available/security.conf \
         /etc/apache2/conf-available/ \
         /etc/apache2/sites-available/
      do
         [ -e $f ] && chmod a+w -R "$f"
      done
      for f in \
         /usr/local/etc/fossology \
         /var/local/ \
         /var/run/apache2/ \
         /var/log/apache2/ \
         /srv/
      do
         [ -e $f ] && chmod a+wrx -R "$f"
      done
   fi
fi # end of CONTAINER_MODE

########################################################################

echo "FOSSology postinstall complete, but sure to complete the remaining"
echo "  steps in the INSTALL instructions."
